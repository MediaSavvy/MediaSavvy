import { n as HighlighterCoreOptions, m as ShikiContext, H as HighlighterGeneric, o as BundledHighlighterOptions, L as LanguageInput, i as ThemeInput, C as CodeToHastOptions, R as Root, b as RequireKeys, c as CodeToThemedTokensOptions, T as ThemedToken, d as CodeToTokensWithThemesOptions, h as MaybeArray, U as Element, x as ThemeRegistration, w as ThemeRegistrationRaw } from './langs.mjs';

/**
 * Get the minimal shiki context for rendering.
 */
declare function getShikiContext(options?: HighlighterCoreOptions): Promise<ShikiContext>;

type HighlighterCore = HighlighterGeneric<never, never>;
declare function getHighlighterCore(options?: HighlighterCoreOptions): Promise<HighlighterCore>;

type GetHighlighterFactory<L extends string, T extends string> = (options?: BundledHighlighterOptions<L, T>) => Promise<HighlighterGeneric<L, T>>;
/**
 * Create a `getHighlighter` function with bundled themes and languages.
 *
 * @param bundledLanguages
 * @param bundledThemes
 * @param ladWasm
 */
declare function createdBundledHighlighter<BundledLangs extends string, BundledThemes extends string>(bundledLanguages: Record<BundledLangs, LanguageInput>, bundledThemes: Record<BundledThemes, ThemeInput>, ladWasm: HighlighterCoreOptions['loadWasm']): GetHighlighterFactory<BundledLangs, BundledThemes>;
declare function createSingletonShorthands<L extends string, T extends string>(getHighlighter: GetHighlighterFactory<L, T>): {
    getSingletonHighlighter: () => Promise<HighlighterGeneric<L, T>>;
    codeToHtml: (code: string, options: CodeToHastOptions<L, T>) => Promise<string>;
    codeToHast: (code: string, options: CodeToHastOptions<L, T>) => Promise<Root>;
    codeToThemedTokens: (code: string, options: RequireKeys<CodeToThemedTokensOptions<L, T>, 'theme' | 'lang'>) => Promise<ThemedToken[][]>;
    codeToTokensWithThemes: (code: string, options: RequireKeys<CodeToTokensWithThemesOptions<L, T>, 'themes' | 'lang'>) => Promise<[color: string, theme: string, tokens: ThemedToken[][]][]>;
};

declare function isPlaintext(lang: string | null | undefined): boolean;
declare function toArray<T>(x: MaybeArray<T>): T[];
declare function isSpecialLang(lang: string): boolean;
declare function addClassToHast(node: Element, className: string | string[]): void;

declare function tokenizeAnsiWithTheme(theme: ThemeRegistration, fileContents: string): ThemedToken[][];

declare function toShikiTheme(rawTheme: ThemeRegistrationRaw | ThemeRegistration): ThemeRegistration;

export { type GetHighlighterFactory as G, type HighlighterCore as H, toShikiTheme as a, getHighlighterCore as b, createdBundledHighlighter as c, createSingletonShorthands as d, toArray as e, isSpecialLang as f, getShikiContext as g, addClassToHast as h, isPlaintext as i, tokenizeAnsiWithTheme as t };
